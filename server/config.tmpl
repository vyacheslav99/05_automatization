# -*- coding: utf-8 -*-

# пример файла конфига сервера
# файл конфига - обычный модуль питона с именем config.py

import logging


PORT = 8080

# возможные архитектуры:
#   - threading: порождение дочерних потоков, тут возможны варианты asynchronous или thread pool,
#     которые можно задать, меняя параметром init_handlers (описана ниже).
#   - processing: порождение дочерних процессов, тут так же 2 варианта - fork или prefork, что также
#     определяется параметром init_handlers.
ARCHITECT = 'threading'

# INIT_HANDLERS: кол-во дочерних потоков/процессов, создаваемое сразу при инициализации сервера -
# т.е. размер пула обработчиков соединения (workers). Если выставить 0 - получим поведение asyc/fork архитектуры,
# когда обработчик порождается при приеме соединения.
# MAX_HANDLERS: максимальное кол-во возможных обработчиков.
# При кол-ве соединений, превысившем init_handlers, будут создаваться новые обработчики, пока их кол-во
# не достигнет max_handlers, больше котрого каждое новое входящее соединеие будет сбрасываться до тех пор,
# пока кол-во выполняющихся обработчиков (активных соединений) не станет меньше.
# После завершения соединения поток (процесс) обработчика уничтожаться не будет, а поступит в пул свободных
# обработчиков, т.о. пул может быть расширен до размера max_handlers.
# При определенных условиях пул может быть очищен, но не меньше размеров init_handlers (теоретически -
# это не реализовывал, но в принципе таке поведение можно предусмотреть).
INIT_HANDLERS = 5
MAX_HANDLERS = 20

DOCUMENT_ROOT = './data'

LOGGING = {
    'filename': None,
    'level': logging.DEBUG,
    'format_str': '[%(asctime)s] %(levelname).1s {0}%(message)s'.format('[%(process)s] ' if ARCHITECT == 'processing' else ''),
    'format_date': '%Y.%m.%d %H:%M:%S'
}
